# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        {% if commit.scope %}\
            - [{{ commit.scope }}] {{ commit.message | upper_first }}\
        {% else %}\
            - {{ commit.message | upper_first }}\
        {% endif %}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# allow only conventional commits
# https://www.conventionalcommits.org
conventional_commits = true
# regex for parsing and grouping commits
commit_parsers = [
    # Skip
    { message = "^chore\\(release\\)", skip = true},
    # Comply with https://github.com/commitizen/conventional-commit-types/blob/c3a9be4c73e47f2e8197de775f41d981701407fb/index.json
    # Why adding numbers to groups is in https://github.com/orhun/git-cliff/issues/9#issuecomment-914521594
    { message = "^feat", group = "<!-- 00 -->Features"},
    { message = "^fix", group = "<!-- 01 -->Bug Fixes"},
    { message = "^doc", group = "<!-- 02 -->Documentation"},
    { message = "^style", group = "<!-- 03 -->Styles"},
    { message = "^refactor", group = "<!-- 04 -->Code Refactoring"},
    { message = "^perf", group = "<!-- 05 -->Performance Improvements"},
    { message = "^test", group = "<!-- 06 -->Tests"},
    { message = "^build", group = "<!-- 07 -->Builds"},
    { message = "^ci", group = "<!-- 08 -->Continuous Integrations"},
    { message = "^chore", group = "<!-- 09 -->Chores"},
    { message = "^revert", group = "<!-- 10 -->Reverts"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*.[0-9]*.[0-9]*"
# regex for skipping tags
skip_tags = "v0.0.0"
# regex for ignoring tags
ignore_tags = "v.*-beta.*"
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
